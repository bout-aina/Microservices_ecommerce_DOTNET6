name: dockercompose7098014117673485496
services:
  aspnetrunbasics:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/WebApps/AspnetRunBasics/Dockerfile
    depends_on:
      basket.api:
        condition: service_started
      catalog.api:
        condition: service_started
      discount.api:
        condition: service_started
      ocelotapigw:
        condition: service_started
      ordering.api:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ApiSettings:GatewayAddress: http://ocelotapigw
    image: aspnetrunbasics
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8006"
      protocol: tcp
    volumes:
    - type: bind
      source: C:\Users\boutainita\AppData\Roaming/Microsoft/UserSecrets
      target: /root/.microsoft/usersecrets
      read_only: true
      bind:
        create_host_path: true
  basket.api:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/Services/Basket/Basket.API/Dockerfile
    container_name: basket.api
    depends_on:
      basketdb:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CacheSettings:ConnectionString: basketdb:6379
      ElasticConfiguration:Uri: http://elasticsearch:9200
      EventBusSettings:HostAddress: amqp://guest:guest@rabbitmq:5672
      GrpcSettings:DiscountUrl: http://discount.grpc
    image: basketapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8001"
      protocol: tcp
  basketdb:
    container_name: basketdb
    image: redis:alpine
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6379
      published: "6379"
      protocol: tcp
    restart: always
  catalog.api:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/Services/Catalog/Catalog.API/Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettigs:ConnectionString: mongodb://catalogdb:27017
    image: catalogapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8000"
      protocol: tcp
  catalogdb:
    container_name: catalogdb
    image: mongo
    networks:
      default: null
    ports:
    - mode: ingress
      target: 27017
      published: "27017"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: mongo_data
      target: /data/db
      volume: {}
  discount.api:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/Services/Discount/Discount.API/Dockerfile
    container_name: discount.api
    depends_on:
      discountdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=discountdb;User
        Id=admin;Password=admin123;
      ElasticConfiguration:Uri: http://elasticsearch:9200
    image: discountapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8082"
      protocol: tcp
  discount.grpc:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/Services/Discount/Discount.GRPC/Dockerfile
    container_name: discount.grpc
    depends_on:
      discountdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=discountdb;User
        Id=admin;Password=admin123;
      ElasticConfiguration:Uri: http://elasticsearch:9200
    image: discountgrpc
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8083"
      protocol: tcp
  discountdb:
    container_name: discountdb
    environment:
      POSTGRES_DB: discountdb
      POSTGRES_PASSWORD: admin123
      POSTGRES_USER: admin
    image: postgres
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5432
      published: "5432"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: postgres_data
      target: /var/lib/postgresql/data
      volume: {}
  elasticsearch:
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      discovery.type: single-node
      xpack.monitoring.enabled: "true"
      xpack.watcher.enabled: "false"
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    networks:
      default: null
    ports:
    - mode: ingress
      target: 9200
      published: "9200"
      protocol: tcp
    volumes:
    - type: volume
      source: elasticsearch-data
      target: /usr/share/elasticsearch/data
      volume: {}
  kibana:
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_started
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    image: docker.elastic.co/kibana/kibana:7.9.2
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5601
      published: "5601"
      protocol: tcp
  ocelotapigw:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/OcelotApiGw/Dockerfile
    container_name: ocelotapigw
    depends_on:
      basket.api:
        condition: service_started
      catalog.api:
        condition: service_started
      discount.api:
        condition: service_started
      ordering.api:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ElasticConfiguration:Uri: http://elasticsearch:9200
    image: ocelotapigw
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8010"
      protocol: tcp
  orderdb:
    container_name: orderdb
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: P@ssword
    image: mcr.microsoft.com/mssql/server:2017-latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 1433
      published: "1433"
      protocol: tcp
    restart: always
  ordering.api:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/Services/Ordering/Ordering.API/Dockerfile
    container_name: ordering.api
    depends_on:
      orderdb:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings:OrderingConnectionString: Server=orderdb;Database=orderDb;User
        Id=sa;Password=P@ssword;
      ElasticConfiguration:Uri: http://elasticsearch:9200
      EventBusSettings:HostAddress: amqp://guest:guest@rabbitmq:5672
    image: orderingapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8004"
      protocol: tcp
  pgadmin:
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aspnetrun.com
      PGADMIN_DEFAULT_PASSWORD: admin1234
    image: dpage/pgadmin4
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "5050"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: pgadmin_data
      target: /root/.pgadmin
      volume: {}
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6000
      published: "6000"
      protocol: tcp
    - mode: ingress
      target: 9000
      published: "9000"
      protocol: tcp
    restart: always
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      bind:
        create_host_path: true
    - type: volume
      source: portainer_data
      target: /data
      volume: {}
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5672
      published: "5672"
      protocol: tcp
    - mode: ingress
      target: 15672
      published: "15672"
      protocol: tcp
    restart: always
  shopping.aggregator:
    build:
      context: C:\Users\boutainita\source\repos\DOTNET_MICRO_SERVICES\Microservices
      dockerfile: src/ApiGateways/Shopping.Aggregator/Dockerfile
    container_name: shopping.aggregator
    depends_on:
      basket.api:
        condition: service_started
      catalog.api:
        condition: service_started
      ordering.api:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ApiSettings:BasketUrl: http://basket.api
      ApiSettings:CatalogUrl: http://catalog.api
      ApiSettings:OrderingUrl: http://ordering.api
      ElasticConfiguration:Uri: http://elasticsearch:9200
    image: shoppingaggregator
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8005"
      protocol: tcp
networks:
  default:
    name: dockercompose7098014117673485496_default
volumes:
  elasticsearch-data:
    name: dockercompose7098014117673485496_elasticsearch-data
  mongo_data:
    name: dockercompose7098014117673485496_mongo_data
  pgadmin_data:
    name: dockercompose7098014117673485496_pgadmin_data
  portainer_data:
    name: dockercompose7098014117673485496_portainer_data
  postgres_data:
    name: dockercompose7098014117673485496_postgres_data